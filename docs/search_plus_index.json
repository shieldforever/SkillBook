{"./":{"url":"./","title":"Introduction","keywords":"","body":"1. Introduction1. Introduction "},"English/":{"url":"English/","title":"English","keywords":"","body":"1. English1. English "},"C++/":{"url":"C++/","title":"C++","keywords":"","body":"1. C++1. C++ "},"Trick/":{"url":"Trick/","title":"技巧","keywords":"","body":"1. 技巧1. 技巧 "},"Trick/1.html":{"url":"Trick/1.html","title":"nohup","keywords":"","body":"1. nohup1. nohup 常规格式： nohup command & 0,1,2 输入（），输出error(>) nohup python3 x.py > /dev/null 2>&1 & ！！！注意 nohup挂起后需要键入exit退出终端，然后再关闭shell！ 查看与python3相关的后台进程： ps -ef|grep python3 "},"Trick/2.html":{"url":"Trick/2.html","title":"git","keywords":"","body":"1. git1.1. 0 创建gitee远程仓库1.2. 1 新机操作1.3. 2 新机分支1.4. 3 返工恢复1. git 1.1. 0 创建gitee远程仓库 远程仓库链接 1.2. 1 新机操作 1.1 新机子上 git clone git clone https://gitee.com/shieldforever/NEMU2020.git 1.2 与远程仓库建立连接 git remote add origin git@gitee.com:shieldforever/NEMU2020.git 若提示远程origin已存在，先输入git remote rm origin 1.3 设定本地user信息 git config --global user.name \"3018216322-Li Haomin\" git config --global user.email \"2295609712@qq.com\" git config --global core.editor vim git config --global color.ui true 1.4 编辑config/Makefile.git文件，将STU_ID修改为自己的学号 vim config/Makefile.git 1.5 提交修改 git add . git commit -m \"modified my STU_ID\" 1.6 若干操作 1.7 设置ssh 1.7.1 重新生成ssh ssh-keygen -t rsa -C \"2295609712@qq.com\" 1.7.2 查看public key cat ~/.ssh/id_rsa.pub （以ssh-rsa 开头，以账号的注册邮箱结尾的）。 1.7.3 将其添加到 https://gitee.com/profile/sshkeys ，标题任意。 1.7.4 终端输入 ssh -T git@gitee.com 1.8 将本地仓库修改push到远程仓库（master） git push -u origin master （第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令git push） 1.3. 2 新机分支 2.1 创建本地分支PA1 git commit --allow-empty -am \"before starting PA1\" git checkout -b PA1（创建分支PA1并跳转到该分支） 2.2 若干修改并提交 将本地分支的修改push到远程仓库分支并建立关系：git push origin PA1:PA1（此处是本地已有PA1分支且已切换到该分支且远程仓库尚无PA1分支时的操作命令）。 推送本地分支local_branch到远程分支 remote_branch并建立关联关系 a.远程已有remote_branch分支并且已经关联本地分支local_branch且本地已经切换到local_branch git push b.远程已有remote_branch分支但未关联本地分支local_branch且本地已经切换到local_branch git push -u origin/remote_branch c.远程没有有remote_branch分支并，本地已经切换到local_branch git push origin local_branch:remote_branch 查看本地分支 git branch 查看远程分支 git branch -r 创建本地分支 local_branch git branch local_branch 创建本地分支local_branch 并切换到local_branch分支 git checkout -b local_branch 切换到分支local_branch git checkout local_branch 1.4. 3 返工恢复 3.1 clone仓库（master） git clone https://gitee.com/shieldforever/NEMU2020.git 3.2 设定本地user信息 git config --global user.name \"3018216322-Li Haomin\" git config --global user.email \"2295609712@qq.com\" 3.3 拉取远程分支PA1的代码git checkout -b PA1 origin/PA1（这种操作在本地仓库新建本地分支PA1，并自动切换到新建的本地分支PA1，当然了远程分支PA1的代码也拉取到了本地分支Pa1中。采用这种方法建立的本地分支会和远程分支建立映射关系。之后的push操作可以直接git push）。 "},"Trick/3.html":{"url":"Trick/3.html","title":"Latex设置公式对齐","keywords":"","body":"1. Latex设置公式对齐1. Latex设置公式对齐 \\begin{aligned} h(a,b,c,n)&=h(a\\ mod\\ c,\\ b\\ mod\\ c,\\ c,\\ n) \\\\&+2\\left\\lfloor\\frac{b}{c}\\right\\rfloor f(a\\ mod\\ c,\\ b\\ mod\\ c,\\ c,\\ n)+2\\left\\lfloor\\frac{a}{c}\\right\\rfloor g(a\\ mod\\ c,\\ b\\ mod\\ c,\\ c,\\ n) \\\\&+\\left\\lfloor\\frac{a}{c}\\right\\rfloor^2\\frac{n(n+1)(2n+1)}{6}+\\left\\lfloor\\frac{b}{c}\\right\\rfloor^2(n+1)+\\left\\lfloor\\frac{a}{c}\\right\\rfloor\\left\\lfloor\\frac{b}{c}\\right\\rfloor n(n+1) \\end{aligned} 使用\\begin{aligned}和\\end{aligned}，并在换行对齐的位置加上&符号。 效果： "},"Trick/4.html":{"url":"Trick/4.html","title":"Latex加粗字体","keywords":"","body":"1. Latex加粗字体1.1. 加粗1.2. 加粗斜体1. Latex加粗字体 1.1. 加粗 $\\bold{f(L,R)=R-L+1}$ 效果： 1.2. 加粗斜体 $\\symbol{f(L,R)=R-L+1}$ 效果： $\\boldsymbol{f(L,R)=R-L+1}$ "},"Trick/5.html":{"url":"Trick/5.html","title":"pip指定源","keywords":"","body":"1. pip指定源1. pip指定源 清华源： pip install numpy -i https://pypi.tuna.tsinghua.edu.cn/simple 阿里云 https://mirrors.aliyun.com/pypi/simple/ 豆瓣(douban) http://pypi.douban.com/simple/ 中国科大 http://pypi.mirrors.ustc.edu.cn/simple/ "},"Trick/6.html":{"url":"Trick/6.html","title":"使用you-get下载B站视频","keywords":"","body":"1. 使用you-get下载B站视频1. 使用you-get下载B站视频 使用-i查看可下载视频信息 使用-o指定下载路径 "},"Trick/7.html":{"url":"Trick/7.html","title":"Pyinstaller打包总结","keywords":"","body":"1. Pyinstaller打包总结1. Pyinstaller打包总结 自己使用pyinstaller打包一个谱聚类代码时(windows下pipenv虚拟环境)： 1 首先对于代码的主程序文件生成用于打包的spec文件 pyi-makespec -F solve.py 注：-F是希望最后打包成一个单独的exe文件，可以在其他无python环境下直接运行。 2 对spec文件进行编辑 自己的代码的话，是根据了1，反正就是根据之前直接打包报的错误（主要是hidden-import和dll依赖），对spec进行编辑。 其中之前报错的库给他加到spec文件中的hiddenimports里面，dll依赖的话，我在本机搜索到对应的dll文件，将其路径加入到了binaries里面。 binaries=[('C:\\\\Users\\\\shieldforever\\\\.virtualenvs\\\\x-7Oc8sVI4\\\\Lib\\\\site-packages\\\\sklearn\\\\.libs\\\\vcomp140.dll','.')] hiddenimports=['sklearn.neighbors.typedefs','sklearn.utils._cython_blas','sklearn.neighbors._quad_tree','sklearn.tree','sklearn.tree._utils','threadpoolctl'] 3 通过spec进行打包 pyinstaller -F solve.spec 打包完成后，生成的dist文件夹中的solve.exe就是可以在无python环境下运行的exe文件了。 主要参考： Pyinstaller 打包发布经验总结 orz! "},"Hole/":{"url":"Hole/","title":"坑","keywords":"","body":"1. 坑1. 坑 记录遇到的坑 "},"Hole/1.html":{"url":"Hole/1.html","title":"Windows10 虚拟机 Pytorch Numpy","keywords":"","body":"1. Windows10 虚拟机 Pytorch Numpy1.1. 安装python3.51.2. 安装pip31.3. 安装pytorch和torchvision1. Windows10 虚拟机 Pytorch Numpy Win10升级到20H2以后，VmWare15就出现了打开虚拟机蓝屏的问题，我真的爱死windows了。解决方法：down一个vmware16. 虚拟机的操作系统用ubuntu64位 16.04 1.1. 安装python3.5 下载python3.5.10 安装包（.tgz）并解压 sudo apt-get install zlib1g sudo apt-get install zlib1g.dev 进入安装包目录 执行 ./configure 进入Modules目录，打开Setup文件 将下面这句取消注释 #zlib zlibmodule.c -I$(prefix)/include -L$(exec_prefix)/lib -lz make&make install sudo unlink /usr/bin/python sudo ln -s /usr/bin/python3/ /usr/bin/python 上述关于zlib的内容是为了安装pip3不出错。 1.2. 安装pip3 sudo apt install python3-pip 1.3. 安装pytorch和torchvision 试了一堆才整出来这么个版本关系。 之前装torchvision他会默认给你装numpy的1.22.x版本，但是在1.21.x版本就已经不支持python3.7以前的版本了，但是只有在安装1.21.x的时候才提示这个问题，安装1.22.x他会报错，但不告诉你是因为这个，报错如下： 我真的会谢！ 我是自己直接尝试装numpy1.21.x才发现早已不支持python3.5的。 我选择尝试降低torchvision的版本，哪怕降到0.1.8，又会自行下载安装torch的1.5.8的版本，然而这个torch太高。 最后直接使用最低版本torchvision：0.1.6， pillow是类似的问题，安装torchvision的时候会默认安装9.1.0的版本，这个版本也不支持python3.5，报错如下 sudo apt install python-setuptools sudo apt-get install libjpeg8 libjpeg62-dev libfreetype6 libfreetype6-dev pip3 --no-cache-dir install torch==1.0.0 -i https://pypi.tuna.tsinghua.edu.cn/simple/ pip3 --no-cache-dir install numpy==1.11.1 -i https://pypi.tuna.tsinghua.edu.cn/simple/ pip3 --no-cache-dir install pillow==4.1.1 -i https://pypi.tuna.tsinghua.edu.cn/simple/ pip3 --no-cache-dir install torchvision==0.1.6 -i https://pypi.tuna.tsinghua.edu.cn/simple/ "},"Hole/2.html":{"url":"Hole/2.html","title":"Windows10 Docker 小坑总结","keywords":"","body":"1. Windows10 Docker 小坑总结1.1. 1 docker-machine生成的default虚拟机时不时死机FATAL : No Bootable medium found! System halted。1.2. 自动挂载失败1.3. dockerfile在build时找不到某些文件1. Windows10 Docker 小坑总结 1.1. 1 docker-machine生成的default虚拟机时不时死机FATAL : No Bootable medium found! System halted。 原因及解决方案 1.2. 自动挂载失败 本身主要参考的是这个，勾选了自动挂载也一直不行，试了网上的其他方法也不行，最后，在我解决的上面那个死机问题后，他就好了，也就是第一个问题解决了以后，自动挂载只需要勾选一下，就可以了。 1.3. dockerfile在build时找不到某些文件 注意文件编码！注意文件编码！注意文件编码！ 一定要注意是crlf还是lf。 "},"Hole/3.html":{"url":"Hole/3.html","title":"docker使用dockerfile进行build时提示“/bin/sh: ./xxx.sh: not found”的可能原因","keywords":"","body":"1. docker使用dockerfile进行build时提示“/bin/sh: ./xxx.sh: not found”的可能原因1. docker使用dockerfile进行build时提示“/bin/sh: ./xxx.sh: not found”的可能原因 问题：用的dockerfile是从github上clone下来的，把它所在的文件夹通过vbox的共享文件夹以及mount命令挂载到docker的default虚拟机上，结果使用dockerfile进行build时出现问题，提示dockerfile内RUN的某个脚本文件找不到，然而这个脚本就和dockerfile在同一目录下。 原因：由于是win10系统下的git clone下来的，sh文件的编码是crlf格式，用vscode打开换成lf格式，就可以了，md这个编码问题明明大二并行计算时候就遇到过，偏偏这次就没想起来这茬事，淦。 "},"Hole/4.html":{"url":"Hole/4.html","title":"ubuntu下git clone 提示 gnutls_handshake() failed: Error in the pull function. 解决方法","keywords":"","body":"1. ubuntu下git clone 提示 gnutls_handshake() failed: Error in the pull function. 解决方法1. ubuntu下git clone 提示 gnutls_handshake() failed: Error in the pull function. 解决方法 来自stackoverflow apt-get -y install build-essential nghttp2 libnghttp2-dev libssl-dev "},"StyleExample/":{"url":"StyleExample/","title":"Style","keywords":"","body":"1. Style1. Style [!NOTE|iconVisibility:hidden] fasdfasdfsad fsdafsdaf [!TIP|style:flat|label:注意|iconVisibility:hidden] sdfasdfsadf This text is highlighted ! This text is highlighted with markdown! This text is highlighted in green! This text is highlighted in red! This text is highlighted with a custom color! import numpy as np for i in range(10): print(i+1) "}}